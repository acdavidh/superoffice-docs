### YamlMime:ManagedReference
items:
- uid: SuperOffice.Data.Record
  commentId: T:SuperOffice.Data.Record
  id: Record
  parent: SuperOffice.Data
  children:
  - SuperOffice.Data.Record.#ctor(System.String)
  - SuperOffice.Data.Record.Table
  - SuperOffice.Data.Record.Values
  langs:
  - csharp
  - vb
  name: Record
  nameWithType: Record
  fullName: SuperOffice.Data.Record
  type: Class
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\nClass used to contain and build information record, used to populate relation datastructures, like <xref href=\"System.Data.DataSet\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: 'public class Record : Object'
    content.vb: >-
      Public Class Record

          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - SuperOffice.Data.Record.EnumUtil.MapEnums``2
  - SuperOffice.Data.Record.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SuperOffice.Data.Record.#ctor(System.String)
  commentId: M:SuperOffice.Data.Record.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: SuperOffice.Data.Record
  langs:
  - csharp
  - vb
  name: Record(String)
  nameWithType: Record.Record(String)
  fullName: SuperOffice.Data.Record.Record(System.String)
  type: Constructor
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\nCreates a new Record.\n"
  syntax:
    content: public Record(string table)
    parameters:
    - id: table
      type: System.String
      description: The name of the table which the record belongs to.
    content.vb: Public Sub New(table As String)
  overload: SuperOffice.Data.Record.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SuperOffice.Data.Record.Table
  commentId: P:SuperOffice.Data.Record.Table
  id: Table
  parent: SuperOffice.Data.Record
  langs:
  - csharp
  - vb
  name: Table
  nameWithType: Record.Table
  fullName: SuperOffice.Data.Record.Table
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\nGets the name of the table which the record belongs to.\n"
  syntax:
    content: public string Table { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Table As String
  overload: SuperOffice.Data.Record.Table*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SuperOffice.Data.Record.Values
  commentId: P:SuperOffice.Data.Record.Values
  id: Values
  parent: SuperOffice.Data.Record
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: Record.Values
  fullName: SuperOffice.Data.Record.Values
  type: Property
  source:
    path: SoCore
    isExternal: true
  assemblies:
  - SoCore
  namespace: SuperOffice.Data
  summary: "\nGets the keys and corresponding values stored on them.\nMaps to columns in a database-table.\n"
  syntax:
    content: public Dictionary<string, RecordValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,SuperOffice.Data.RecordValue}
    content.vb: Public ReadOnly Property Values As Dictionary(Of String, RecordValue)
  overload: SuperOffice.Data.Record.Values*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: SuperOffice.Data
  commentId: N:SuperOffice.Data
  isExternal: true
  name: SuperOffice.Data
  nameWithType: SuperOffice.Data
  fullName: SuperOffice.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SuperOffice.Data.Record.EnumUtil.MapEnums``2
  commentId: M:EnumUtil.MapEnums``2(``0)
  parent: EnumUtil
  definition: EnumUtil.MapEnums``2(``0)
  name: MapEnums<Record, To>()
  nameWithType: EnumUtil.MapEnums<Record, To>()
  fullName: EnumUtil.MapEnums<SuperOffice.Data.Record, To>()
  nameWithType.vb: EnumUtil.MapEnums(Of Record, To)()
  fullName.vb: EnumUtil.MapEnums(Of SuperOffice.Data.Record, To)()
  name.vb: MapEnums(Of Record, To)()
  spec.csharp:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums<Record, To>
    nameWithType: EnumUtil.MapEnums<Record, To>
    fullName: EnumUtil.MapEnums<SuperOffice.Data.Record, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2
    name: MapEnums(Of Record, To)
    nameWithType: EnumUtil.MapEnums(Of Record, To)
    fullName: EnumUtil.MapEnums(Of SuperOffice.Data.Record, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.Data.Record.SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  parent: SuperOffice.ErpSync.ConnectorWS.Converters
  definition: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  name: MapEnums<Record, To>()
  nameWithType: Converters.MapEnums<Record, To>()
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Record, To>()
  nameWithType.vb: Converters.MapEnums(Of Record, To)()
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Record, To)()
  name.vb: MapEnums(Of Record, To)()
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums<Record, To>
    nameWithType: Converters.MapEnums<Record, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<SuperOffice.Data.Record, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2
    name: MapEnums(Of Record, To)
    nameWithType: Converters.MapEnums(Of Record, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of SuperOffice.Data.Record, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EnumUtil.MapEnums``2(``0)
  commentId: M:EnumUtil.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: EnumUtil.MapEnums<From, To>(From)
  fullName: EnumUtil.MapEnums<From, To>(From)
  nameWithType.vb: EnumUtil.MapEnums(Of From, To)(From)
  fullName.vb: EnumUtil.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: EnumUtil.MapEnums<From, To>
    fullName: EnumUtil.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EnumUtil.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: EnumUtil.MapEnums(Of From, To)
    fullName: EnumUtil.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: EnumUtil
  commentId: T:EnumUtil
  isExternal: true
  name: EnumUtil
  nameWithType: EnumUtil
  fullName: EnumUtil
- uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  commentId: M:SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
  isExternal: true
  name: MapEnums<From, To>(From)
  nameWithType: Converters.MapEnums<From, To>(From)
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>(From)
  nameWithType.vb: Converters.MapEnums(Of From, To)(From)
  fullName.vb: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)(From)
  name.vb: MapEnums(Of From, To)(From)
  spec.csharp:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums<From, To>
    nameWithType: Converters.MapEnums<From, To>
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums<From, To>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums``2(``0)
    name: MapEnums(Of From, To)
    nameWithType: Converters.MapEnums(Of From, To)
    fullName: SuperOffice.ErpSync.ConnectorWS.Converters.MapEnums(Of From, To)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: From
    nameWithType: From
    fullName: From
  - name: )
    nameWithType: )
    fullName: )
- uid: SuperOffice.ErpSync.ConnectorWS.Converters
  commentId: T:SuperOffice.ErpSync.ConnectorWS.Converters
  parent: SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: Converters
  nameWithType: Converters
  fullName: SuperOffice.ErpSync.ConnectorWS.Converters
- uid: SuperOffice.ErpSync.ConnectorWS
  commentId: N:SuperOffice.ErpSync.ConnectorWS
  isExternal: true
  name: SuperOffice.ErpSync.ConnectorWS
  nameWithType: SuperOffice.ErpSync.ConnectorWS
  fullName: SuperOffice.ErpSync.ConnectorWS
- uid: SuperOffice.Data.Record.#ctor*
  commentId: Overload:SuperOffice.Data.Record.#ctor
  isExternal: true
  name: Record
  nameWithType: Record.Record
  fullName: SuperOffice.Data.Record.Record
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SuperOffice.Data.Record.Table*
  commentId: Overload:SuperOffice.Data.Record.Table
  isExternal: true
  name: Table
  nameWithType: Record.Table
  fullName: SuperOffice.Data.Record.Table
- uid: SuperOffice.Data.Record.Values*
  commentId: Overload:SuperOffice.Data.Record.Values
  isExternal: true
  name: Values
  nameWithType: Record.Values
  fullName: SuperOffice.Data.Record.Values
- uid: System.Collections.Generic.Dictionary{System.String,SuperOffice.Data.RecordValue}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,SuperOffice.Data.RecordValue}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, RecordValue>
  nameWithType: Dictionary<String, RecordValue>
  fullName: System.Collections.Generic.Dictionary<System.String, SuperOffice.Data.RecordValue>
  nameWithType.vb: Dictionary(Of String, RecordValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, SuperOffice.Data.RecordValue)
  name.vb: Dictionary(Of String, RecordValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.RecordValue
    name: RecordValue
    nameWithType: RecordValue
    fullName: SuperOffice.Data.RecordValue
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SuperOffice.Data.RecordValue
    name: RecordValue
    nameWithType: RecordValue
    fullName: SuperOffice.Data.RecordValue
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
